import type { Reducer } from "../types/Reducer.js";
/**
 * Takes a `reducer` and an `initialValue` and applies it to `source` array.
 *
 * @example
 * ```typescript
 * const sum = arrayReduce<number, number>(total => item => total + item);
 * const sumStartingInZero = sum(0);
 * const sumStartingInTwo = sum(2);
 *
 * sumStartingInZero([1, 2, 3]); // 6
 * sumStartingInTwo([1, 2, 3]); // 8
 * ```
 * @template Item Type of the items in the source array.
 * @template Output Type of the output (an array of `Input` by default).
 * @returns Curried function with `reducer` in context.
 */
export declare const arrayReduce: <Item, Output = readonly Item[]>(
	reducer: Reducer<Item, Output>,
) => (initialValue: Output) => (source: readonly Item[]) => Output;
